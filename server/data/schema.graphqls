type Braintree {
  id: ID
  plans: [JSON]
  clientToken: String
  braintreeCustomer: JSON
  braintreeCustomerSubscription: JSON
}

input CreateSubscriptionMutationInput {
  planId: String!
  paymentMethodNonce: String!
  discountId: String
  cardType: String!
  clientMutationId: String
}

type CreateSubscriptionMutationPayload {
  viewer: Viewer
  clientMutationId: String
}

scalar Custom

input CustomFilter {
  __eq: Custom
}

input ForgotPasswordMutationInput {
  email: String!
  clientMutationId: String
}

type ForgotPasswordMutationPayload {
  login: Login
  viewer: Viewer
  loginEdge: LoginEdge
  clientMutationId: String
}

input IDFilter {
  __eq: ID
  __neq: ID
  __in: [ID]
  __nin: [ID]
  __null: Boolean
}

input IntFilter {
  __eq: Int
  __neq: Int
  __in: [Int]
  __nin: [Int]
  __gt: Int
  __gte: Int
  __lt: Int
  __lte: Int
  __null: Boolean
}

# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON

type Login implements Node {
  id: ID!
  permission: JSON
  loginId: Int
  accessLevel: Int
  email: String
  passwordHash: String
  created: String
  expired: String
  creator: Person
  person: Person
  roleConnection(after: String, first: Int, before: String, last: Int, sort: [RoleSort], filter: [RoleFilter], search: String): RoleConnection
}

# A connection to a list of items.
type LoginConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [LoginEdge]

  # A count of the total number of objects in this connection, ignoring pagination. 
  #     This allows a client to fetch the first five objects by passing "5" as the argument to "first", 
  #     then fetch the total count so it could display "5 of 83", for example.
  totalCount: Int!
  availableFilters: JSON
  availableSorts: JSON
}

# An edge in a connection.
type LoginEdge {
  # The item at the end of the edge
  node: Login

  # A cursor for use in pagination
  cursor: String!
}

input LoginFilter {
  id: IDFilter
  permission: CustomFilter
  loginId: IntFilter
  accessLevel: IntFilter
  email: StringFilter
  passwordHash: StringFilter
  created: StringFilter
  expired: StringFilter
  creator: [PersonFilter]
  person: [PersonFilter]
}

input LoginMutationInput {
  email: String!
  password: String!
  quoteId: ID
  clientMutationId: String
}

type LoginMutationPayload {
  viewer: Viewer
  clientMutationId: String
}

input LoginSort {
  id: Sort
  permission: Sort
  loginId: Sort
  accessLevel: Sort
  email: Sort
  passwordHash: Sort
  created: Sort
  expired: Sort
  creator: [PersonSort]
  person: [PersonSort]
}

input LogoutMutationInput {
  id: String
  clientMutationId: String
}

type LogoutMutationPayload {
  viewer: Viewer
  clientMutationId: String
}

type Mutation {
  login(input: LoginMutationInput!): LoginMutationPayload
  logout(input: LogoutMutationInput!): LogoutMutationPayload
  signUp(input: SignUpMutationInput!): SignUpMutationPayload
  forgotPassword(input: ForgotPasswordMutationInput!): ForgotPasswordMutationPayload
  resetPassword(input: ResetPasswordMutationInput!): ResetPasswordMutationPayload
  updatePassword(input: UpdatePasswordMutationInput!): UpdatePasswordMutationPayload
  createSubscription(input: CreateSubscriptionMutationInput!): CreateSubscriptionMutationPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Person implements Node {
  id: ID!
  permission: JSON
  personId: Int
  creatorId: Int
  firstName: String
  lastName: String
  braintreeCustomerId: String
  braintreeCustomer: JSON
  created: String
  expired: String
  creator: Person
  login: Login
}

# A connection to a list of items.
type PersonConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [PersonEdge]

  # A count of the total number of objects in this connection, ignoring pagination. 
  #     This allows a client to fetch the first five objects by passing "5" as the argument to "first", 
  #     then fetch the total count so it could display "5 of 83", for example.
  totalCount: Int!
  availableFilters: JSON
  availableSorts: JSON
}

# An edge in a connection.
type PersonEdge {
  # The item at the end of the edge
  node: Person

  # A cursor for use in pagination
  cursor: String!
}

input PersonFilter {
  id: IDFilter
  permission: CustomFilter
  personId: IntFilter
  creatorId: IntFilter
  firstName: StringFilter
  lastName: StringFilter
  braintreeCustomerId: StringFilter
  braintreeCustomer: CustomFilter
  creator: [PersonFilter]
  login: [LoginFilter]
  date: CustomFilter
}

input PersonSort {
  id: Sort
  permission: Sort
  personId: Sort
  creatorId: Sort
  firstName: Sort
  lastName: Sort
  braintreeCustomerId: Sort
  braintreeCustomer: Sort
  created: Sort
  expired: Sort
  creator: [PersonSort]
  login: [LoginSort]
}

type Query {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
  viewer: Viewer
}

input ResetPasswordMutationInput {
  loginId: ID!
  password: String!
  clientMutationId: String
}

type ResetPasswordMutationPayload {
  login: Login
  viewer: Viewer
  loginEdge: LoginEdge
  clientMutationId: String
}

type Role implements Node {
  id: ID!
  permission: JSON
  roleId: Int
  label: String
  description: String
  created: String
  updated: String
  creator: Person
  loginConnection(after: String, first: Int, before: String, last: Int, sort: [LoginSort], filter: [LoginFilter], search: String): LoginConnection
}

# A connection to a list of items.
type RoleConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [RoleEdge]

  # A count of the total number of objects in this connection, ignoring pagination. 
  #     This allows a client to fetch the first five objects by passing "5" as the argument to "first", 
  #     then fetch the total count so it could display "5 of 83", for example.
  totalCount: Int!
  availableFilters: JSON
  availableSorts: JSON
}

# An edge in a connection.
type RoleEdge {
  # The item at the end of the edge
  node: Role

  # A cursor for use in pagination
  cursor: String!
}

input RoleFilter {
  id: IDFilter
  permission: CustomFilter
  roleId: IntFilter
  label: StringFilter
  description: StringFilter
  created: StringFilter
  updated: StringFilter
  creator: [PersonFilter]
}

input RoleSort {
  id: Sort
  permission: Sort
  roleId: Sort
  label: Sort
  description: Sort
  created: Sort
  updated: Sort
  creator: [PersonSort]
}

input SignUpMutationInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  clientMutationId: String
}

type SignUpMutationPayload {
  person: Person
  viewer: Viewer
  personEdge: PersonEdge
  clientMutationId: String
}

# The direction in which to sort the nodes in a connection.
enum Sort {
  ASC
  DESC
}

input StringFilter {
  __eq: String
  __neq: String
  __in: [String]
  __nin: [String]
  __li: String
  __nli: String
  __null: Boolean
}

input UpdatePasswordMutationInput {
  loginId: ID!
  password: String!
  clientMutationId: String
}

type UpdatePasswordMutationPayload {
  login: Login
  viewer: Viewer
  loginEdge: LoginEdge
  clientMutationId: String
}

type Viewer implements Node {
  # The ID of an object
  id: ID!
  personId: String
  accessLevel: Int
  token: String
  ip: String
  braintree: Braintree
  login(id: ID!): Login
  loginConnection(after: String, first: Int, before: String, last: Int, sort: [LoginSort], filter: [LoginFilter], search: String): LoginConnection
  person(id: ID!): Person
  personConnection(after: String, first: Int, before: String, last: Int, sort: [PersonSort], filter: [PersonFilter], search: String): PersonConnection
  role(id: ID!): Role
  roleConnection(after: String, first: Int, before: String, last: Int, sort: [RoleSort], filter: [RoleFilter], search: String): RoleConnection
}
